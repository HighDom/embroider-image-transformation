import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt  # Corrected import
import cv2

image_path_golden = '/Users/dominiquebuob/Documents/Projects/Embroider-Image-Transformation/data/Husky-Golden-Red.png'
image = cv2.imread(image_path_golden)

# Check if the image was loaded successfully
if image is not None:
    print("Image loaded successfully")
    
else:
    print("Failed to load image")



def reduce_colors(img, n_colors=8):
    # Reshape the image to a 2D array of pixels
    pixels = img.reshape((-1, 3))
    
    # Apply K-means clustering to cluster pixel colors
    kmeans = KMeans(n_clusters=n_colors, random_state=42).fit(pixels)
    
    # Recreate the image with the reduced palette
    new_colors = kmeans.cluster_centers_.astype(int)[kmeans.labels_]
    reduced_img = new_colors.reshape(img.shape)
    
    return reduced_img

# Reduce colors in the image
n_colors = 8  # Number of colors to reduce to
reduced_img = reduce_colors(image, n_colors)  # Pass 'image' instead of 'image_path_golden'

# Display the original and the color-reduced image side by side
plt.figure(figsize=(12, 6))

# Convert BGR image to RGB
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Original image
plt.subplot(1, 2, 1)  # 1 row, 2 columns, 1st subplot
plt.imshow(image_rgb)  # Use 'image_rgb' instead of 'image_path_golden'
plt.title('Original Image')
plt.axis('off')

# Color-reduced image
plt.subplot(1, 2, 2)  # 1 row, 2 columns, 2nd subplot
plt.imshow(reduced_img)
plt.title(f'Reduced to {n_colors} Colors')
plt.axis('off')

plt.show()
