import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt  # Corrected import
import cv2

image_path_golden = '/Users/dominiquebuob/Documents/Projects/Embroider-Image-Transformation/data/Husky-Golden-Red.png'
image = cv2.imread(image_path_golden)

# Check if the image was loaded successfully
if image is not None:
    print("Image loaded successfully")
    
else:
    print("Failed to load image")



def reduce_colors(img, n_colors=8):
    # Reshape the image to a 2D array of pixels
    pixels = img.reshape((-1, 3))
    
    # Apply K-means clustering to cluster pixel colors
    kmeans = KMeans(n_clusters=n_colors, random_state=42).fit(pixels)
    
    # Recreate the image with the reduced palette
    new_colors = kmeans.cluster_centers_.astype(int)[kmeans.labels_]
    reduced_img = new_colors.reshape(img.shape)
    
    return reduced_img

# Reduce colors in the image
n_colors = 8  # Number of colors to reduce to
reduced_img = reduce_colors(image, n_colors)  # Pass 'image' instead of 'image_path_golden'


def apply_morphological_opening(img, kernel_size=(5, 5), iterations=1):
    """Apply morphological opening to an image to remove small blobs."""
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, kernel_size)
    opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel, iterations=iterations)
    return opening

# Assuming reduced_img is a binary image or processed to highlight the regions of interest
# Convert the reduced image to grayscale (if not already in grayscale)
reduced_img_gray = cv2.cvtColor(reduced_img, cv2.COLOR_BGR2GRAY)

# Apply thresholding if necessary to get a binary image
_, binary_img = cv2.threshold(reduced_img_gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# Apply morphological opening to the binary image
cleaned_img = apply_morphological_opening(binary_img, kernel_size=(3, 3), iterations=2)

# To visualize the effect of morphological opening, display the cleaned_img
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(binary_img, cmap='gray')
plt.title('Before Morphological Opening')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(cleaned_img, cmap='gray')
plt.title('After Morphological Opening')
plt.axis('off')

plt.show()
